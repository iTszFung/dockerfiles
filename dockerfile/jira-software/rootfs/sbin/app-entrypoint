#!/bin/bash
#
# A helper script for ENTRYPOINT.
#
# If first CMD argument is 'jira', then the script will start jira
# If CMD argument is overriden and not 'jira', then the user wants to run
# his own process.

set -o errexit

[[ ${DEBUG} == true ]] && set -x

# 等待 DB 可连接之后再进行连接
function waitForDB() {
  local waitHost=${DOCKER_WAIT_HOST:-}
  local waitPort=${DOCKER_WAIT_PORT:-}
  local waitTimeout=${DOCKER_WAIT_TIMEOUT:-60}
  local waitIntervalTime=${DOCKER_WAIT_INTERVAL:-5}
  if [ -n "${waitHost}" ] && [ -n "${waitPort}" ]; then
    dockerize -timeout ${waitTimeout}s -wait-retry-interval ${waitIntervalTime}s -wait tcp://${waitHost}:${waitPort}
  fi
}

SERAPH_CONFIG_FILE="${JOYTECH_APP_INSTALL_DIR}/atlassian-jira/WEB-INF/classes/seraph-config.xml"

function enableCrowdSSO() {
  xmlstarlet ed -P -S -L --delete "//authenticator" $SERAPH_CONFIG_FILE
  xmlstarlet ed -P -S -L -s "//security-config" --type elem -n authenticator -i "//authenticator[not(@class)]" -t attr -n class -v "com.atlassian.jira.security.login.SSOSeraphAuthenticator" $SERAPH_CONFIG_FILE
}

function enableJiraAuth() {
  xmlstarlet ed -P -S -L --delete "//authenticator" $SERAPH_CONFIG_FILE
  xmlstarlet ed -P -S -L -s "//security-config" --type elem -n authenticator -i "//authenticator[not(@class)]" -t attr -n class -v "com.atlassian.jira.security.login.JiraSeraphAuthenticator" $SERAPH_CONFIG_FILE
}

function controlCrowdSSO() {
  local setting=$1
  case "$setting" in
    true)
      enableCrowdSSO
    ;;
    false)
      enableJiraAuth
    ;;
    *)
      echo "Crowd SSO settings ingored because of setting ${setting}"
    esac
}

if [ -n "${JIRA_DELAYED_START}" ]; then
  sleep ${JIRA_DELAYED_START}
fi

if [ -n "${JIRA_ENV_FILE}" ]; then
  source ${JIRA_ENV_FILE}
fi

if [ -n "${JOYTECH_APP_PROXY_NAME}" ]; then
  xmlstarlet ed -P -S -L --insert "//Connector[not(@proxyName)]" --type attr -n proxyName --value "${JOYTECH_APP_PROXY_NAME}" ${JOYTECH_APP_INSTALL_DIR}/conf/server.xml
fi

if [ -n "${JOYTECH_APP_PROXY_PORT}" ]; then
  xmlstarlet ed -P -S -L --insert "//Connector[not(@proxyPort)]" --type attr -n proxyPort --value "${JOYTECH_APP_PROXY_PORT}" ${JOYTECH_APP_INSTALL_DIR}/conf/server.xml
fi

if [ -n "${JOYTECH_APP_PROXY_SCHEME}" ]; then
  xmlstarlet ed -P -S -L --insert "//Connector[not(@scheme)]" --type attr -n scheme --value "${JOYTECH_APP_PROXY_SCHEME}" ${JOYTECH_APP_INSTALL_DIR}/conf/server.xml
fi

jira_logfile="/var/atlassian/jira/jira-software.log"

if [ -n "${JOYTECH_APP_LOG_FILE}" ]; then
  jira_logfile=${JOYTECH_APP_LOG_FILE}
fi

if [ ! -d "${jira_logfile}" ]; then
  mkdir -p ${jira_logfile}
fi

if [ -n "${JOYTECH_ENABLE_CROWD_SSO}" ]; then
  controlCrowdSSO ${JOYTECH_ENABLE_CROWD_SSO}
fi

TARGET_PROPERTY=1catalina.org.apache.juli.AsyncFileHandler.directory
sed -i "/${TARGET_PROPERTY}/d" ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties
echo "${TARGET_PROPERTY} = ${jira_logfile}" >> ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties

TARGET_PROPERTY=2localhost.org.apache.juli.AsyncFileHandler.directory
sed -i "/${TARGET_PROPERTY}/d" ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties
echo "${TARGET_PROPERTY} = ${jira_logfile}" >> ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties

TARGET_PROPERTY=3manager.org.apache.juli.AsyncFileHandler.directory
sed -i "/${TARGET_PROPERTY}/d" ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties
echo "${TARGET_PROPERTY} = ${jira_logfile}" >> ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties

TARGET_PROPERTY=4host-manager.org.apache.juli.AsyncFileHandler.directory
sed -i "/${TARGET_PROPERTY}/d" ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties
echo "${TARGET_PROPERTY} = ${jira_logfile}" >> ${JOYTECH_APP_INSTALL_DIR}/conf/logging.properties

if [ "$1" = 'jira' ] || [ "${1:0:1}" = '-' ]; then
  waitForDB
  sh /usr/local/share/atlassian/launch.sh
  if [ -n "${JOYTECH_APP_PROXY_PATH}" ]; then
    xmlstarlet ed -P -S -L --update "//Context/@path" --value "${JOYTECH_APP_PROXY_PATH}" ${JOYTECH_APP_INSTALL_DIR}/conf/server.xml
  fi
  # su-exec ${JOYTECH_USER} 
  # ${JOYTECH_APP_INSTALL_DIR}/bin/start-jira.sh
  exec ${JOYTECH_APP_INSTALL_DIR}/bin/start-jira.sh -fg "$@"
else
  exec "$@"
fi
